# Generated by Django 2.2 on 2020-03-28 12:39

import datetime
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('content', models.TextField(blank=True, null=True)),
                ('degree', models.CharField(max_length=50)),
                ('subject', models.CharField(max_length=50)),
                ('last_update', models.DateField(default=datetime.date.today)),
                ('average_valoration', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('DNI', models.CharField(max_length=20, unique=True)),
                ('degree', models.CharField(max_length=50)),
                ('starting_date', models.DateField()),
                ('average_valoration', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Exercice',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notehub.Document')),
                ('unit', models.IntegerField()),
                ('corrected', models.BooleanField(default=False)),
            ],
            bases=('notehub.document',),
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notehub.Document')),
                ('unit', models.IntegerField()),
                ('date', models.DateField()),
                ('schematization_degree', models.PositiveSmallIntegerField(choices=[(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four'), (5, 'five')])),
            ],
            bases=('notehub.document',),
        ),
        migrations.CreateModel(
            name='Valoration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four'), (5, 'five')])),
                ('comment', models.TextField()),
                ('date', models.DateField(auto_now_add=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notehub.Document')),
            ],
        ),
        migrations.AddField(
            model_name='document',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notehub.Student'),
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('document_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notehub.Document')),
                ('date', models.DateField()),
                ('parcial', models.PositiveSmallIntegerField(choices=[(1, 'First'), (2, 'Second')])),
                ('solved', models.BooleanField(default=False)),
                ('exercices', models.ManyToManyField(to='notehub.Exercice')),
            ],
            bases=('notehub.document',),
        ),
    ]
